variables:
  REPO_NAME: pyspline
  HOME: /home/mdolabuser/
  DOCKER_WORKING_DIR: /home/mdolabuser/repos/${{ variables.REPO_NAME }}
  DOCKER_MOUNT_DIR: /home/mdolabuser/travis/${{ variables.REPO_NAME }}


jobs:
- job:
  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      'c7-gcc-ompi-latest':
        DOCKER_TAG: c7-gcc-ompi-latest
      'c7-intel-impi-latest':
        DOCKER_TAG: c7-intel-impi-latest
      'u20-gcc-ompi-latest':
        DOCKER_TAG: u20-gcc-ompi-latest
      'u20-gcc-ompi-stable':
        DOCKER_TAG: u20-gcc-ompi-stable
  steps:
  - script: docker pull mdolab/public:$(DOCKER_TAG)
  - script: docker run -t -d 
        --name app
        --mount "type=bind,src=$(pwd),target=${{ variables.DOCKER_MOUNT_DIR }}"
        mdolab/public:$(DOCKER_TAG)
        /bin/bash
  - script: docker exec app /bin/bash -c "rm -rf ${{ variables.DOCKER_WORKING_DIR }} && cp -r ${{ variables.DOCKER_MOUNT_DIR }} ${{ variables.DOCKER_WORKING_DIR }}"
  - script: docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && cp config/defaults/config.LINUX_GFORTRAN.mk config/config.mk && make";
  - script: docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && pip install ."
  - script: docker exec app /bin/bash -c ". \$HOME/.bashrc_mdolab && cd ${{ variables.DOCKER_WORKING_DIR }} && testflo . -v"
  - script: docker rm -f app 